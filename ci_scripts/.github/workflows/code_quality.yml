name: Code Quality Check

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run Code Quality Analysis
      run: |
        python -m code_quality_agent.cli.main analyze src/ \
          --output-format json \
          --output-file quality_report.json \
          --min-severity high \
          --max-issues 10 \
          --no-cache
          
    - name: Quality Gate Check
      run: |
        # Parse quality metrics
        CRITICAL_ISSUES=$(python -c "import json; data=json.load(open('quality_report.json')); print(data['summary']['issues_by_severity'].get('critical', 0))")
        HIGH_ISSUES=$(python -c "import json; data=json.load(open('quality_report.json')); print(data['summary']['issues_by_severity'].get('high', 0))")
        QUALITY_SCORE=$(python -c "import json; data=json.load(open('quality_report.json')); print(data['summary']['quality_score'])")
        
        echo "Quality Metrics:"
        echo "- Critical Issues: $CRITICAL_ISSUES"
        echo "- High Issues: $HIGH_ISSUES" 
        echo "- Quality Score: $QUALITY_SCORE"
        
        # Fail build if critical issues found
        if [ "$CRITICAL_ISSUES" -gt 0 ]; then
          echo "❌ Build failed: Critical issues found!"
          exit 1
        fi
        
        # Fail build if too many high severity issues
        if [ "$HIGH_ISSUES" -gt 10 ]; then
          echo "❌ Build failed: Too many high severity issues!"
          exit 1
        fi
        
        echo "✅ Quality gate passed!"
        
    - name: Upload Quality Report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: quality-report
        path: quality_report.json
        
    - name: Comment PR with Quality Results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const report = JSON.parse(fs.readFileSync('quality_report.json', 'utf8'));
          
          const comment = `## 🔍 Code Quality Report
          
          **Quality Score:** ${report.summary.quality_score}/100
          **Total Issues:** ${report.summary.total_issues}
          
          **Issues by Severity:**
          - Critical: ${report.summary.issues_by_severity.critical || 0}
          - High: ${report.summary.issues_by_severity.high || 0}
          - Medium: ${report.summary.issues_by_severity.medium || 0}
          - Low: ${report.summary.issues_by_severity.low || 0}
          
          **Top Issues:**
          ${report.prioritized_issues.slice(0, 3).map(issue => 
            `- **${issue.issue.title}** (${issue.issue.severity}) - ${issue.issue.location.file_path}:${issue.issue.location.line_start}`
          ).join('\n')}
          
          ${report.summary.issues_by_severity.critical > 0 ? '❌ **Build Failed:** Critical issues found!' : '✅ **Build Passed:** No critical issues'}
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });