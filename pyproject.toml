[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "code-quality-intelligence-agent"
version = "1.0.0"
description = "An AI-powered tool that analyzes code repositories and generates actionable, developer-friendly reports"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Code Quality Intelligence Team", email = "team@codequalityai.dev"}
]
maintainers = [
    {name = "Code Quality Intelligence Team", email = "team@codequalityai.dev"}
]
keywords = [
    "code-quality",
    "static-analysis",
    "ai",
    "security",
    "performance",
    "linting",
    "code-review",
    "developer-tools"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Quality Assurance",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Testing",
    "Topic :: Security",
    "Environment :: Console",
    "Environment :: Web Environment",
]
requires-python = ">=3.9"
dependencies = [
    # Core dependencies
    "click>=8.0.0",
    "pydantic>=2.0.0",
    "pyyaml>=6.0",
    "pathspec>=0.11.0",
    "rich>=13.0.0",
    "tqdm>=4.65.0",
    
    # AI and LLM dependencies
    "langchain>=0.1.0",
    "langchain-openai>=0.1.0",
    "langchain-anthropic>=0.1.0",
    "openai>=1.0.0",
    "anthropic>=0.20.0",
    
    # Code analysis dependencies
    "tree-sitter>=0.20.0",
    "tree-sitter-python>=0.20.0",
    "tree-sitter-javascript>=0.20.0",
    "tree-sitter-typescript>=0.20.0",
    
    # Vector store and embeddings
    "chromadb>=0.4.0",
    "sentence-transformers>=2.2.0",
    
    # Utilities
    "gitpython>=3.1.0",
    "requests>=2.28.0",
    "aiohttp>=3.8.0",
    "aiofiles>=23.0.0",
]

[project.optional-dependencies]
# Web interface dependencies
web = [
    "fastapi>=0.100.0",
    "uvicorn[standard]>=0.20.0",
    "jinja2>=3.1.0",
    "python-multipart>=0.0.6",
]

# Visualization dependencies
viz = [
    "plotly>=5.0.0",
    "networkx>=3.0",
    "matplotlib>=3.6.0",
    "seaborn>=0.12.0",
]

# Development dependencies
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "isort>=5.12.0",
    "pre-commit>=3.0.0",
    "sphinx>=6.0.0",
    "sphinx-rtd-theme>=1.2.0",
]

# All optional dependencies
all = [
    "code-quality-intelligence-agent[web,viz,dev]"
]

[project.urls]
Homepage = "https://github.com/codequalityai/intelligence-agent"
Documentation = "https://docs.codequalityai.dev"
Repository = "https://github.com/codequalityai/intelligence-agent.git"
"Bug Tracker" = "https://github.com/codequalityai/intelligence-agent/issues"
Changelog = "https://github.com/codequalityai/intelligence-agent/blob/main/CHANGELOG.md"

[project.scripts]
cqa = "code_quality_agent.cli.main:main"
code-quality-agent = "code_quality_agent.cli.main:main"

[tool.setuptools]
packages = ["code_quality_agent"]
include-package-data = true

[tool.setuptools.package-data]
code_quality_agent = [
    "**/*.yaml",
    "**/*.yml",
    "**/*.json",
    "**/*.html",
    "**/*.css",
    "**/*.js",
    "web/frontend/dist/**/*",
]

# Black configuration
[tool.black]
line-length = 100
target-version = ['py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | node_modules
)/
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

# MyPy configuration
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "tree_sitter.*",
    "chromadb.*",
    "langchain.*",
    "openai.*",
    "anthropic.*",
    "plotly.*",
    "networkx.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "web: marks tests that require web interface",
    "llm: marks tests that require LLM API access",
]

# Coverage configuration
[tool.coverage.run]
source = ["code_quality_agent"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"